#! /bin/bash
# DONT RUN AS ROOT! AHAHA!
#requires spd-say, pactl, pacmd, amixer, grep
# Plays a inaudible sound, then gets the not 'running' device. This is because pulseaudio forces devices into an 'idle'/'suspend' mode for power savings, but there's no other way to parse an output for a default device.
set -x
notrunning_sink=$(spd-say -i -100 "boopis lal" && pactl list short sinks | grep -v RUNNING | grep -oE '^[0-9]+')
runinng_sink=$(spd-say -i -100 "boopis lal" && pactl list short sinks | grep RUNNING | grep -oE '^[0-9]+')
headphones=$(pactl list short sinks | grep -E 'usb' | grep -oE '^[0-9]+')
laptop_speakers=$(pactl list short sinks | grep -E 'pci-0000_00_1f' | grep -oE '^[0-9]+')
# uncomment below to help debug
#spdsay=$(spd-say -r 20 -i 100 "Over Here!")
listsinks=$($spdsay && pactl list short sinks)
grepnotrun=$(echo "$listsinks" | grep -v RUNNING)
greprun=$(echo "$listsinks" | grep RUNNING)

notify(){
    notify-send -u normal -t 990 "${1}"
}

setsink(){
    local sink="${1}"
#    notify "${1}"
    amixer -D pulse set Master 0% # so we don't get any ear shattering screetches between switching
    (
	# Sets the new default link (if only they had a 'get-default-link' command)
	echo set-default-sink $new_sink
	
	# Sets every audio input to the new sink
	pacmd list-sink-inputs | grep -E '^\s*index:' | grep -oE '[0-9]+' |
	    while read input
	    do
		echo move-sink-input $input $sink
	    done
	# this whole section is within a subshell of the pacmd interface i guess
    ) | pacmd > /dev/null
}

# Sets volume to 50% if big speakers are selected
volume(){
    if [ "${new_sink}" -eq "${headphones}" ];
    then
	amixer -D pulse set Master 35%
    elif [ "${new_sink}" -eq "${laptop_speakers}" ];
    then
	# this statement is to avoid tweeting noise if there's an input device using passthrough
	if pactl list short | grep -e "module-loopback";
	then
	    amixer -D pulse set Master 50%
	else
	    amixer -D pulse set Master 65%
	fi
    fi
}

testoutput(){
    notify "Running: ${notrunning_sink}"
    notify "Not Running: ${running_sink}"    
    notify "${listsinks}"
    notify "${greprun}"
}

# This makes sure the variable has a value
if [ -z "${running_sink}" ];
then
    notrunning_sink=${laptop_speakers}
    testoutput
    notify "Set to laptop output."
    #exit
fi

new_sink=${notrunning_sink}

setsink ${new_sink}
volume
exit
